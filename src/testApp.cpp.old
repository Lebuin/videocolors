#include "testApp.h"
#include <cstdlib>

Json::Value testApp::read_json(string path) {
    ifstream ifs(path.c_str());
    string json(istreambuf_iterator<char>(ifs), (istreambuf_iterator<char>()));

    Json::Value root;
    Json::Reader reader;
    reader.parse(json, root);

    return root;
}

void testApp::write_json(Json::Value root, char* path) {
    Json::StyledWriter writer;
    string json = writer.write(root);
    ofstream ofs(path);
    ofs << json;
    ofs.close();
}


//--------------------------------------------------------------
void testApp::setup(){

    Json::Value config = read_json(CONF);
    const char *video_path = config["video"].asCString();

    // Initialize libav
    av_register_all();

    // Open video file
    AVFormatContext *pFormatCtx = avformat_alloc_context();;
    if(avformat_open_input(&pFormatCtx, video_path, NULL, NULL) != 0) {
        printf("file not found: %s", video_path);
        std::exit(EXIT_FAILURE);
    }

    // Get usefull streams
    int streamIndex = -1;
    avformat_find_stream_info(pFormatCtx, NULL);
    for(int i=0; i < pFormatCtx->nb_streams; i++) {
        if(pFormatCtx->streams[i]->codec->codec_type == AVMEDIA_TYPE_VIDEO) {
            streamIndex = i;
            break;
        }
    }


    // Load codec
    AVCodecContext *pCodecCtx = pFormatCtx->streams[streamIndex]->codec;
    printf("%i\n", pCodecCtx->pix_fmt); // Huh? Why is this 0???
    AVCodec *pCodec = avcodec_find_decoder(pCodecCtx->codec_id);
    avcodec_open2(pCodecCtx, pCodec, NULL);

    // Set window dimensions
    int width = pCodecCtx->width;
    int height = pCodecCtx->height;
    ofSetWindowShape(width, height);

    // Read frame
    SwsContext *pSwsCtx = sws_getContext(
        width, height, pCodecCtx->pix_fmt,
        width, height, PIX_FMT_RGB24,
        SWS_BILINEAR, NULL, NULL, NULL
    );

    int frameFinished;
    AVPacket packet;
    AVFrame *pFrame = av_frame_alloc();
    AVFrame *pFrameRgb = av_frame_alloc();
    pFrameRgb->linesize[0] = 3 * width;
    pFrameRgb->data[0] = (uint8_t*) malloc(pFrameRgb->linesize[0] * height);

    while(av_read_frame(pFormatCtx, &packet) == 0) {
        if(packet.stream_index == streamIndex) {
            avcodec_decode_video2(pCodecCtx, pFrame, &frameFinished, &packet);

            if(frameFinished) {
                //printf("decoded frame");
                sws_scale(pSwsCtx, pFrame->data, pFrame->linesize, 0, height, pFrameRgb->data, pFrameRgb->linesize);

                /*for(int i=0; i < 100; i++) {
                    printf("%i ", pRgb.data[0][i]);
                }*/
                return;
            }
        }
    }
}

//--------------------------------------------------------------
void testApp::update(){

}

//--------------------------------------------------------------
void testApp::draw(){

}

//--------------------------------------------------------------
void testApp::keyPressed(int key){

}

//--------------------------------------------------------------
void testApp::keyReleased(int key){

}

//--------------------------------------------------------------
void testApp::mouseMoved(int x, int y){

}

//--------------------------------------------------------------
void testApp::mouseDragged(int x, int y, int button){

}

//--------------------------------------------------------------
void testApp::mousePressed(int x, int y, int button){

}

//--------------------------------------------------------------
void testApp::mouseReleased(int x, int y, int button){

}

//--------------------------------------------------------------
void testApp::windowResized(int w, int h){

}

//--------------------------------------------------------------
void testApp::gotMessage(ofMessage msg){

}

//--------------------------------------------------------------
void testApp::dragEvent(ofDragInfo dragInfo){

}
